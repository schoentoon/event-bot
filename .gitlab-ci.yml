image: golang:latest

stages:
  - test
  - build
  - deploy

test:
  stage: test
  script:
    - go mod download && go install golang.org/x/tools/cmd/stringer
    - go generate ./...
    - go test -v -race ./...

golangci-lint:
  stage: test
  image:
    name: golangci/golangci-lint:latest
    entrypoint: [""]
  script:
    - go mod download && go install golang.org/x/tools/cmd/stringer
    - go generate ./...
    - golangci-lint run ./...

build:
  stage: build
  script:
    - go mod download && go install golang.org/x/tools/cmd/stringer
    - go generate ./...
    - go build ./cmd/bot/...
  artifacts:
    paths:
      - bot
      - tmpl/

build-docker:
  stage: build
  tags:
    - docker
  image: docker:latest
  services:
    - docker:dind
  only:
    - master
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE .
    - docker push $CI_REGISTRY_IMAGE

deploy_production:
  stage: deploy
  when: manual
  image: alpine:latest
  needs:
    - build
  only:
    - master
  script:
    - apk add openssh rsync
    - eval $(ssh-agent -s)
    - chmod 700 $SSH_PRIVATE_KEY_FILE
    - ssh-add $SSH_PRIVATE_KEY_FILE
    - rsync -e "ssh -o StrictHostKeyChecking=no" -rvh --stats bot tmpl $HOST:$REMOTEPATH
    - ssh -o StrictHostKeyChecking=no $HOST systemctl --user restart eventbot
  environment:
    name: production